"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Textarea } from "@/components/ui/textarea";
import { Checkbox } from "@/components/ui/checkbox";
import { 
  Languages, 
  Bot, 
  Plus, 
  Edit, 
  Save, 
  X, 
  Search,
  Filter,
  Download,
  Upload,
  RefreshCw,
  CheckCircle,
  AlertCircle,
  Clock
} from "lucide-react";
import { toast } from "sonner";

interface TranslationKey {
  id: string;
  key: string;
  category: string;
  description?: string;
  isPlural: boolean;
  createdAt: string;
  updatedAt: string;
  translations: Translation[];
}

interface Translation {
  id: string;
  language: string;
  value: string;
  pluralForm?: string;
  isAutoGenerated: boolean;
  lastUpdatedBy?: string;
  createdAt: string;
  updatedAt: string;
}

interface TranslationBatch {
  id: string;
  name: string;
  description?: string;
  sourceLang: string;
  targetLang: string;
  status: string;
  totalKeys: number;
  processedKeys: number;
  failedKeys: number;
  aiProvider: string;
  createdAt: string;
  completedAt?: string;
}

const CATEGORIES = [
  "general",
  "dashboard",
  "forms",
  "buttons",
  "navigation",
  "tables",
  "modals",
  "errors",
  "success",
  "validation",
];

export function TranslationManager() {
  const [translationKeys, setTranslationKeys] = useState<TranslationKey[]>([]);
  const [batches, setBatches] = useState<TranslationBatch[]>([]);
  const [loading, setLoading] = useState(true);
  const [search, setSearch] = useState("");
  const [selectedCategory, setSelectedCategory] = useState("");
  const [selectedLanguage, setSelectedLanguage] = useState("el");
  const [sourceLanguage, setSourceLanguage] = useState("en");
  const [editingKey, setEditingKey] = useState<string | null>(null);
  const [editingTranslation, setEditingTranslation] = useState<{ [key: string]: string }>({});
  const [aiTranslating, setAiTranslating] = useState(false);
  const [selectedKeys, setSelectedKeys] = useState<string[]>([]);
  const [total, setTotal] = useState(0);
  const [page, setPage] = useState(1);
  const [pageSize, setPageSize] = useState(25);

  // Load translations
  const loadTranslations = async () => {
    try {
      const params = new URLSearchParams();
      if (selectedCategory) params.append("category", selectedCategory);
      if (selectedLanguage) params.append("language", selectedLanguage);
      if (sourceLanguage) params.append("sourceLang", sourceLanguage);
      if (search) params.append("search", search);
      params.append("page", String(page));
      params.append("pageSize", String(pageSize));

      const response = await fetch(`/api/translations?${params}`);
      if (response.ok) {
        const data = await response.json();
        setTranslationKeys(data.translationKeys);
        setTotal(data.total ?? 0);
      } else {
        toast.error("Failed to load translations");
      }
    } catch (error) {
      toast.error("Error loading translations");
    } finally {
      setLoading(false);
    }
  };

  // Load batches
  const loadBatches = async () => {
    try {
      const response = await fetch("/api/translations/batches");
      if (response.ok) {
        const data = await response.json();
        setBatches(data.batches);
      }
    } catch (error) {
      console.error("Error loading batches:", error);
    }
  };

  const scanForKeys = async () => {
    try {
      const res = await fetch("/api/translations/scan", { method: "POST" });
      if (res.ok) {
        const data = await res.json();
        toast.success(`Scanned: ${data.foundKeys.length} keys, Created: ${data.created}`);
        loadTranslations();
      } else {
        toast.error("Scan failed");
      }
    } catch {
      toast.error("Scan error");
    }
  };

  useEffect(() => {
    loadTranslations();
    loadBatches();
  }, [selectedCategory, selectedLanguage, sourceLanguage, search, page, pageSize]);

  // Create new translation key
  const createTranslationKey = async (data: {
    key: string;
    category: string;
    description?: string;
    isPlural: boolean;
  }) => {
    try {
      const response = await fetch("/api/translations", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });

      if (response.ok) {
        toast.success("Translation key created");
        loadTranslations();
      } else {
        toast.error("Failed to create translation key");
      }
    } catch (error) {
      toast.error("Error creating translation key");
    }
  };

  // Update translation
  const updateTranslation = async (translationKeyId: string, language: string, value: string, pluralForm?: string) => {
    try {
      const response = await fetch("/api/translations", {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          translationKeyId,
          language,
          value,
          pluralForm,
        }),
      });

      if (response.ok) {
        toast.success("Translation updated");
        loadTranslations();
      } else {
        toast.error("Failed to update translation");
      }
    } catch (error) {
      toast.error("Error updating translation");
    }
  };

  // AI Translate
  const aiTranslate = async (translationKeyIds?: string[], category?: string, batchName?: string) => {
    setAiTranslating(true);
    try {
      const response = await fetch("/api/translations/ai", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          translationKeyIds,
          category,
          sourceLang: sourceLanguage,
          targetLang: selectedLanguage,
          batchName,
        }),
      });

      if (response.ok) {
        const result = await response.json();
        toast.success(result.message);
        loadTranslations();
        loadBatches();
        setSelectedKeys([]);
      } else {
        toast.error("Failed to translate with AI");
      }
    } catch (error) {
      toast.error("Error translating with AI");
    } finally {
      setAiTranslating(false);
    }
  };

  // Toggle key selection
  const toggleKeySelection = (keyId: string) => {
    setSelectedKeys(prev => 
      prev.includes(keyId) 
        ? prev.filter(id => id !== keyId)
        : [...prev, keyId]
    );
  };

  // Select all visible keys
  const selectAllKeys = () => {
    const visibleKeys = translationKeys.map(key => key.id);
    setSelectedKeys(visibleKeys);
  };

  // Clear selection
  const clearSelection = () => {
    setSelectedKeys([]);
  };

  const getBatchStatusIcon = (status: string) => {
    switch (status) {
      case "completed":
        return <CheckCircle className="h-4 w-4 text-green-500" />;
      case "completed_with_errors":
        return <AlertCircle className="h-4 w-4 text-yellow-500" />;
      case "failed":
        return <X className="h-4 w-4 text-red-500" />;
      case "processing":
        return <RefreshCw className="h-4 w-4 text-blue-500 animate-spin" />;
      default:
        return <Clock className="h-4 w-4 text-gray-500" />;
    }
  };

  const getBatchStatusColor = (status: string) => {
    switch (status) {
      case "completed":
        return "bg-green-100 text-green-800";
      case "completed_with_errors":
        return "bg-yellow-100 text-yellow-800";
      case "failed":
        return "bg-red-100 text-red-800";
      case "processing":
        return "bg-blue-100 text-blue-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  return (
    <div className="space-y-6">
      {/* Filters and Actions */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Languages className="h-5 w-5" />
            Translation Filters
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
              <Label htmlFor="search">Search</Label>
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                <Input
                  id="search"
                  placeholder="Search keys..."
                  value={search}
                  onChange={(e) => setSearch(e.target.value)}
                  className="pl-10"
                />
              </div>
            </div>
            
            <div>
              <Label htmlFor="category">Category</Label>
              <Select value={selectedCategory} onValueChange={setSelectedCategory}>
                <SelectTrigger>
                  <SelectValue placeholder="All categories" />
                </SelectTrigger>
                <SelectContent>
                  {CATEGORIES.map(category => (
                    <SelectItem key={category} value={category}>
                      {category.charAt(0).toUpperCase() + category.slice(1)}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            <div>
              <Label htmlFor="language">Language</Label>
              <Select value={selectedLanguage} onValueChange={setSelectedLanguage}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="el">Greek (Ελληνικά)</SelectItem>
                  <SelectItem value="en">English</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label htmlFor="sourceLang">Source Language</Label>
              <Select value={sourceLanguage} onValueChange={setSourceLanguage}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="en">English</SelectItem>
                  <SelectItem value="el">Greek (Ελληνικά)</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div className="flex items-end gap-2">
              <Button onClick={loadTranslations} variant="outline" className="flex-1">
                <RefreshCw className="h-4 w-4 mr-2" />
                Refresh
              </Button>
                <Button onClick={scanForKeys} className="flex-1">
                  <Filter className="h-4 w-4 mr-2" />
                  Scan Keys
                </Button>
            </div>
          </div>
        </CardContent>
      </Card>

      <Tabs defaultValue="keys" className="space-y-4">
        <TabsList>
          <TabsTrigger value="keys">Translations</TabsTrigger>
          <TabsTrigger value="batches">AI Batches</TabsTrigger>
        </TabsList>

        <TabsContent value="keys" className="space-y-4">
          {/* Bulk bar */}
          <div className="flex items-center justify-between rounded-md border p-3 bg-card">
            <div className="flex items-center gap-2 text-sm text-muted-foreground">
              <span>{selectedKeys.length} selected</span>
              {selectedKeys.length > 0 && (
                <Button variant="ghost" size="sm" onClick={clearSelection}>Clear</Button>
              )}
            </div>
            <div className="flex items-center gap-2">
              <Button variant="outline" size="sm" onClick={selectAllKeys} disabled={translationKeys.length === 0}>
                Select Page
              </Button>
              <Button variant="outline" size="sm" onClick={() => aiTranslate(undefined, undefined, `All ${sourceLanguage}->${selectedLanguage}`)} disabled={aiTranslating}>
                <Bot className="h-4 w-4 mr-2" /> AI Translate All
              </Button>
              <Button variant="outline" size="sm" onClick={() => aiTranslate(selectedKeys)} disabled={aiTranslating || selectedKeys.length === 0}>
                <Bot className="h-4 w-4 mr-2" /> AI Translate Selected
              </Button>
              <Button variant="outline" size="sm" onClick={() => aiTranslate(undefined, selectedCategory)} disabled={aiTranslating || !selectedCategory}>
                <Bot className="h-4 w-4 mr-2" /> AI Translate Category
              </Button>
              <CreateTranslationKeyDialog onCreate={createTranslationKey} />
            </div>
          </div>

          {/* Table */}
          <div className="overflow-x-auto rounded-md border">
            <div className="min-w-[1000px]">
              <div className="grid grid-cols-12 bg-muted px-3 py-2 text-xs font-medium sticky top-0 z-10">
              <div className="col-span-1">
                <Checkbox
                  checked={translationKeys.length > 0 && selectedKeys.length === translationKeys.length}
                  onCheckedChange={(val) => {
                    if (val) selectAllKeys(); else clearSelection();
                  }}
                />
              </div>
                <div className="col-span-3">KEY</div>
                <div className="col-span-2">CATEGORY</div>
                <div className="col-span-2">DESCRIPTION</div>
                <div className="col-span-2">SOURCE ({sourceLanguage.toUpperCase()})</div>
                <div className="col-span-2">TARGET ({selectedLanguage.toUpperCase()})</div>
              </div>
              {/* Legend / Hints */}
              <div className="flex items-center gap-4 px-3 py-2 text-xs text-muted-foreground border-t">
                <div className="flex items-center gap-1"><Edit className="h-3 w-3" /> Click target cell to edit</div>
                <div className="flex items-center gap-1"><Bot className="h-3 w-3" /> Use AI to auto-translate row or selection</div>
              </div>

              {loading ? (
                <div className="p-6 text-center text-sm text-muted-foreground">Loading...</div>
              ) : translationKeys.length === 0 ? (
                <div className="p-6 text-center text-sm text-muted-foreground">No translation keys found</div>
              ) : (
                translationKeys.map((translationKey) => (
                  <div key={translationKey.id} className="grid grid-cols-12 items-start border-t px-3 py-3 gap-2">
                    <div className="col-span-1 pt-1">
                      <Checkbox checked={selectedKeys.includes(translationKey.id)} onCheckedChange={() => toggleKeySelection(translationKey.id)} />
                    </div>
                    <div className="col-span-3">
                      <div className="font-mono text-xs break-all" title={translationKey.key}>{translationKey.key}</div>
                    </div>
                    <div className="col-span-2">
                      <Badge variant="outline">{translationKey.category}</Badge>
                    </div>
                    <div className="col-span-2 text-xs text-muted-foreground break-words min-h-[1.5rem]">
                      {translationKey.description ?? "—"}
                    </div>
                    <div className="col-span-2 text-sm text-muted-foreground">
                      {(() => {
                        const src = translationKey.translations.find(t => t.language === sourceLanguage || (t as any).languageCode === sourceLanguage);
                        return src?.value ?? "—";
                      })()}
                    </div>
                    <div className="col-span-2">
                      <TranslationKeyCard
                        translationKey={translationKey}
                        selectedLanguage={selectedLanguage}
                        sourceLanguage={sourceLanguage}
                        isSelected={selectedKeys.includes(translationKey.id)}
                        onToggleSelection={() => toggleKeySelection(translationKey.id)}
                        onUpdateTranslation={updateTranslation}
                        onAiTranslate={() => aiTranslate([translationKey.id])}
                        aiTranslating={aiTranslating}
                      />
                    </div>
                  </div>
                ))
              )}
            </div>
          </div>

          {/* Pagination */}
          <div className="flex items-center justify-between pt-4">
            <div className="text-sm text-muted-foreground">
              Page {page} of {Math.max(1, Math.ceil(total / pageSize))} · {total} total
            </div>
            <div className="flex items-center gap-2">
              <Button variant="outline" size="sm" onClick={() => setPage((p) => Math.max(1, p - 1))} disabled={page <= 1}>Prev</Button>
              <Button variant="outline" size="sm" onClick={() => setPage((p) => p + 1)} disabled={page >= Math.ceil(total / pageSize)}>Next</Button>
              <Select value={String(pageSize)} onValueChange={(v) => { setPage(1); setPageSize(Number(v)); }}>
                <SelectTrigger className="w-[110px]"><SelectValue /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="10">10 / page</SelectItem>
                  <SelectItem value="25">25 / page</SelectItem>
                  <SelectItem value="50">50 / page</SelectItem>
                  <SelectItem value="100">100 / page</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </TabsContent>

        <TabsContent value="batches" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>AI Translation Batches</CardTitle>
              <CardDescription>
                View and manage AI translation batches
              </CardDescription>
            </CardHeader>
            <CardContent>
              {batches.length === 0 ? (
                <div className="text-center py-8">
                  <Bot className="h-8 w-8 mx-auto mb-4 text-muted-foreground" />
                  <p>No AI translation batches found</p>
                </div>
              ) : (
                <div className="space-y-4">
                  {batches.map((batch) => (
                    <div key={batch.id} className="border rounded-lg p-4">
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center gap-2">
                          {getBatchStatusIcon(batch.status)}
                          <h3 className="font-medium">{batch.name}</h3>
                        </div>
                        <Badge className={getBatchStatusColor(batch.status)}>
                          {batch.status.replace('_', ' ')}
                        </Badge>
                      </div>
                      
                      {batch.description && (
                        <p className="text-sm text-muted-foreground mb-2">
                          {batch.description}
                        </p>
                      )}
                      
                      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                        <div>
                          <span className="font-medium">Source:</span> {batch.sourceLang.toUpperCase()}
                        </div>
                        <div>
                          <span className="font-medium">Target:</span> {batch.targetLang.toUpperCase()}
                        </div>
                        <div>
                          <span className="font-medium">Progress:</span> {batch.processedKeys}/{batch.totalKeys}
                        </div>
                        <div>
                          <span className="font-medium">Failed:</span> {batch.failedKeys}
                        </div>
                      </div>
                      
                      <div className="mt-2">
                        <div className="w-full bg-gray-200 rounded-full h-2">
                          <div
                            className="bg-blue-600 h-2 rounded-full"
                            style={{ width: `${(batch.processedKeys / batch.totalKeys) * 100}%` }}
                          />
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}

// Translation Key Card Component
function TranslationKeyCard({
  translationKey,
  selectedLanguage,
  sourceLanguage,
  isSelected,
  onToggleSelection,
  onUpdateTranslation,
  onAiTranslate,
  aiTranslating,
}: {
  translationKey: TranslationKey;
  selectedLanguage: string;
  sourceLanguage: string;
  isSelected: boolean;
  onToggleSelection: () => void;
  onUpdateTranslation: (translationKeyId: string, language: string, value: string, pluralForm?: string) => void;
  onAiTranslate: () => void;
  aiTranslating: boolean;
}) {
  const [editing, setEditing] = useState(false);
  const [editValue, setEditValue] = useState("");
  const [editPluralForm, setEditPluralForm] = useState("");

  const currentTranslation = translationKey.translations.find(t => t.language === selectedLanguage || (t as any).languageCode === selectedLanguage);
  const sourceTranslation = translationKey.translations.find(t => t.language === sourceLanguage || (t as any).languageCode === sourceLanguage);

  const startEditing = () => {
    setEditValue(currentTranslation?.value || "");
    setEditPluralForm(currentTranslation?.pluralForm || "");
    setEditing(true);
  };

  const saveTranslation = () => {
    onUpdateTranslation(translationKey.id, selectedLanguage, editValue, editPluralForm || undefined);
    setEditing(false);
  };

  const cancelEditing = () => {
    setEditValue("");
    setEditPluralForm("");
    setEditing(false);
  };

  return (
    <div>
      {editing ? (
        <div className="space-y-2">
          <Textarea
            value={editValue}
            onChange={(e) => setEditValue(e.target.value)}
            placeholder="Enter translation..."
            rows={2}
            onKeyDown={(e) => {
              if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') saveTranslation();
              if (e.key === 'Escape') cancelEditing();
            }}
            onBlur={saveTranslation}
            autoFocus
          />
          {translationKey.isPlural && (
            <Input
              value={editPluralForm}
              onChange={(e) => setEditPluralForm(e.target.value)}
              placeholder="Plural form (optional)"
            />
          )}
          <div className="flex items-center gap-2">
            <Button variant="outline" size="sm" onClick={saveTranslation}><Save className="h-4 w-4 mr-1" /> Save</Button>
            <Button variant="ghost" size="sm" onClick={cancelEditing}><X className="h-4 w-4 mr-1" /> Cancel</Button>
          </div>
        </div>
      ) : (
        <div
          className="min-h-[2.5rem] p-2 rounded-md border cursor-text hover:bg-accent/30"
          onClick={startEditing}
          title="Click to edit"
        >
          {currentTranslation ? (
            <div className="flex items-center gap-2">
              <span>{currentTranslation.value}</span>
              {currentTranslation.isAutoGenerated && (
                <Badge variant="secondary">AI</Badge>
              )}
            </div>
          ) : (
            <span className="text-muted-foreground italic">Click to add translation</span>
          )}
        </div>
      )}
    </div>
  );
}

// Create Translation Key Dialog Component
function CreateTranslationKeyDialog({ onCreate }: { onCreate: (data: any) => void }) {
  const [open, setOpen] = useState(false);
  const [key, setKey] = useState("");
  const [category, setCategory] = useState("general");
  const [description, setDescription] = useState("");
  const [isPlural, setIsPlural] = useState(false);

  const handleCreate = () => {
    if (!key.trim()) {
      toast.error("Key is required");
      return;
    }

    onCreate({
      key: key.trim(),
      category,
      description: description.trim() || undefined,
      isPlural,
    });

    setOpen(false);
    setKey("");
    setCategory("general");
    setDescription("");
    setIsPlural(false);
  };

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button size="sm">
          <Plus className="h-4 w-4 mr-2" />
          Add Key
        </Button>
      </DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Create Translation Key</DialogTitle>
          <DialogDescription>
            Add a new translation key to the system
          </DialogDescription>
        </DialogHeader>
        
        <div className="space-y-4">
          <div>
            <Label htmlFor="key">Key *</Label>
            <Input
              id="key"
              value={key}
              onChange={(e) => setKey(e.target.value)}
              placeholder="e.g., dashboard.title"
            />
          </div>
          
          <div>
            <Label htmlFor="category">Category</Label>
            <Select value={category} onValueChange={setCategory}>
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {CATEGORIES.map(cat => (
                  <SelectItem key={cat} value={cat}>
                    {cat.charAt(0).toUpperCase() + cat.slice(1)}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
          
          <div>
            <Label htmlFor="description">Description</Label>
            <Textarea
              id="description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              placeholder="Optional description of this translation key"
              rows={2}
            />
          </div>
          
          <div className="flex items-center space-x-2">
            <Checkbox
              id="isPlural"
              checked={isPlural}
              onCheckedChange={setIsPlural}
            />
            <Label htmlFor="isPlural">Supports plural forms</Label>
          </div>
        </div>
        
        <div className="flex justify-end space-x-2">
          <Button variant="outline" onClick={() => setOpen(false)}>
            Cancel
          </Button>
          <Button onClick={handleCreate}>
            Create Key
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
}
