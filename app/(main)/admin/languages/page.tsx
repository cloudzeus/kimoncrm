"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Plus, Edit, Trash2, Star, Globe } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface SupportedLanguage {
  id: string;
  code: string;
  name: string;
  nativeName: string;
  flag: string;
  isActive: boolean;
  isDefault: boolean;
  sortOrder: number;
  createdAt: string;
  updatedAt: string;
}

// Comprehensive list of country flags
const countryFlags = [
  { code: "ğŸ‡¦ğŸ‡©", name: "Andorra" },
  { code: "ğŸ‡¦ğŸ‡ª", name: "United Arab Emirates" },
  { code: "ğŸ‡¦ğŸ‡«", name: "Afghanistan" },
  { code: "ğŸ‡¦ğŸ‡¬", name: "Antigua and Barbuda" },
  { code: "ğŸ‡¦ğŸ‡®", name: "Anguilla" },
  { code: "ğŸ‡¦ğŸ‡±", name: "Albania" },
  { code: "ğŸ‡¦ğŸ‡²", name: "Armenia" },
  { code: "ğŸ‡¦ğŸ‡´", name: "Angola" },
  { code: "ğŸ‡¦ğŸ‡¶", name: "Antarctica" },
  { code: "ğŸ‡¦ğŸ‡·", name: "Argentina" },
  { code: "ğŸ‡¦ğŸ‡¸", name: "American Samoa" },
  { code: "ğŸ‡¦ğŸ‡¹", name: "Austria" },
  { code: "ğŸ‡¦ğŸ‡º", name: "Australia" },
  { code: "ğŸ‡¦ğŸ‡¼", name: "Aruba" },
  { code: "ğŸ‡¦ğŸ‡½", name: "Ã…land Islands" },
  { code: "ğŸ‡¦ğŸ‡¿", name: "Azerbaijan" },
  { code: "ğŸ‡§ğŸ‡¦", name: "Bosnia and Herzegovina" },
  { code: "ğŸ‡§ğŸ‡§", name: "Barbados" },
  { code: "ğŸ‡§ğŸ‡©", name: "Bangladesh" },
  { code: "ğŸ‡§ğŸ‡ª", name: "Belgium" },
  { code: "ğŸ‡§ğŸ‡«", name: "Burkina Faso" },
  { code: "ğŸ‡§ğŸ‡¬", name: "Bulgaria" },
  { code: "ğŸ‡§ğŸ‡­", name: "Bahrain" },
  { code: "ğŸ‡§ğŸ‡®", name: "Burundi" },
  { code: "ğŸ‡§ğŸ‡¯", name: "Benin" },
  { code: "ğŸ‡§ğŸ‡±", name: "Saint BarthÃ©lemy" },
  { code: "ğŸ‡§ğŸ‡²", name: "Bermuda" },
  { code: "ğŸ‡§ğŸ‡³", name: "Brunei" },
  { code: "ğŸ‡§ğŸ‡´", name: "Bolivia" },
  { code: "ğŸ‡§ğŸ‡¶", name: "Caribbean Netherlands" },
  { code: "ğŸ‡§ğŸ‡·", name: "Brazil" },
  { code: "ğŸ‡§ğŸ‡¸", name: "Bahamas" },
  { code: "ğŸ‡§ğŸ‡¹", name: "Bhutan" },
  { code: "ğŸ‡§ğŸ‡»", name: "Bouvet Island" },
  { code: "ğŸ‡§ğŸ‡¼", name: "Botswana" },
  { code: "ğŸ‡§ğŸ‡¾", name: "Belarus" },
  { code: "ğŸ‡§ğŸ‡¿", name: "Belize" },
  { code: "ğŸ‡¨ğŸ‡¦", name: "Canada" },
  { code: "ğŸ‡¨ğŸ‡¨", name: "Cocos Islands" },
  { code: "ğŸ‡¨ğŸ‡©", name: "Congo - Kinshasa" },
  { code: "ğŸ‡¨ğŸ‡«", name: "Central African Republic" },
  { code: "ğŸ‡¨ğŸ‡¬", name: "Congo - Brazzaville" },
  { code: "ğŸ‡¨ğŸ‡­", name: "Switzerland" },
  { code: "ğŸ‡¨ğŸ‡®", name: "CÃ´te d'Ivoire" },
  { code: "ğŸ‡¨ğŸ‡°", name: "Cook Islands" },
  { code: "ğŸ‡¨ğŸ‡±", name: "Chile" },
  { code: "ğŸ‡¨ğŸ‡²", name: "Cameroon" },
  { code: "ğŸ‡¨ğŸ‡³", name: "China" },
  { code: "ğŸ‡¨ğŸ‡´", name: "Colombia" },
  { code: "ğŸ‡¨ğŸ‡µ", name: "Clipperton Island" },
  { code: "ğŸ‡¨ğŸ‡·", name: "Costa Rica" },
  { code: "ğŸ‡¨ğŸ‡º", name: "Cuba" },
  { code: "ğŸ‡¨ğŸ‡»", name: "Cape Verde" },
  { code: "ğŸ‡¨ğŸ‡¼", name: "CuraÃ§ao" },
  { code: "ğŸ‡¨ğŸ‡½", name: "Christmas Island" },
  { code: "ğŸ‡¨ğŸ‡¾", name: "Cyprus" },
  { code: "ğŸ‡¨ğŸ‡¿", name: "Czechia" },
  { code: "ğŸ‡©ğŸ‡ª", name: "Germany" },
  { code: "ğŸ‡©ğŸ‡¬", name: "Diego Garcia" },
  { code: "ğŸ‡©ğŸ‡¯", name: "Djibouti" },
  { code: "ğŸ‡©ğŸ‡°", name: "Denmark" },
  { code: "ğŸ‡©ğŸ‡²", name: "Dominica" },
  { code: "ğŸ‡©ğŸ‡´", name: "Dominican Republic" },
  { code: "ğŸ‡©ğŸ‡¿", name: "Algeria" },
  { code: "ğŸ‡ªğŸ‡¦", name: "Ceuta & Melilla" },
  { code: "ğŸ‡ªğŸ‡¨", name: "Ecuador" },
  { code: "ğŸ‡ªğŸ‡ª", name: "Estonia" },
  { code: "ğŸ‡ªğŸ‡¬", name: "Egypt" },
  { code: "ğŸ‡ªğŸ‡­", name: "Western Sahara" },
  { code: "ğŸ‡ªğŸ‡·", name: "Eritrea" },
  { code: "ğŸ‡ªğŸ‡¸", name: "Spain" },
  { code: "ğŸ‡ªğŸ‡¹", name: "Ethiopia" },
  { code: "ğŸ‡ªğŸ‡º", name: "European Union" },
  { code: "ğŸ‡«ğŸ‡®", name: "Finland" },
  { code: "ğŸ‡«ğŸ‡¯", name: "Fiji" },
  { code: "ğŸ‡«ğŸ‡°", name: "Falkland Islands" },
  { code: "ğŸ‡«ğŸ‡²", name: "Micronesia" },
  { code: "ğŸ‡«ğŸ‡´", name: "Faroe Islands" },
  { code: "ğŸ‡«ğŸ‡·", name: "France" },
  { code: "ğŸ‡¬ğŸ‡¦", name: "Gabon" },
  { code: "ğŸ‡¬ğŸ‡§", name: "United Kingdom" },
  { code: "ğŸ‡¬ğŸ‡©", name: "Grenada" },
  { code: "ğŸ‡¬ğŸ‡ª", name: "Georgia" },
  { code: "ğŸ‡¬ğŸ‡«", name: "French Guiana" },
  { code: "ğŸ‡¬ğŸ‡¬", name: "Guernsey" },
  { code: "ğŸ‡¬ğŸ‡­", name: "Ghana" },
  { code: "ğŸ‡¬ğŸ‡®", name: "Gibraltar" },
  { code: "ğŸ‡¬ğŸ‡±", name: "Greenland" },
  { code: "ğŸ‡¬ğŸ‡²", name: "Gambia" },
  { code: "ğŸ‡¬ğŸ‡³", name: "Guinea" },
  { code: "ğŸ‡¬ğŸ‡µ", name: "Guadeloupe" },
  { code: "ğŸ‡¬ğŸ‡¶", name: "Equatorial Guinea" },
  { code: "ğŸ‡¬ğŸ‡·", name: "Greece" },
  { code: "ğŸ‡¬ğŸ‡¸", name: "South Georgia & South Sandwich Islands" },
  { code: "ğŸ‡¬ğŸ‡¹", name: "Guatemala" },
  { code: "ğŸ‡¬ğŸ‡º", name: "Guam" },
  { code: "ğŸ‡¬ğŸ‡¼", name: "Guinea-Bissau" },
  { code: "ğŸ‡¬ğŸ‡¾", name: "Guyana" },
  { code: "ğŸ‡­ğŸ‡°", name: "Hong Kong SAR China" },
  { code: "ğŸ‡­ğŸ‡²", name: "Heard & McDonald Islands" },
  { code: "ğŸ‡­ğŸ‡³", name: "Honduras" },
  { code: "ğŸ‡­ğŸ‡·", name: "Croatia" },
  { code: "ğŸ‡­ğŸ‡¹", name: "Haiti" },
  { code: "ğŸ‡­ğŸ‡º", name: "Hungary" },
  { code: "ğŸ‡®ğŸ‡¨", name: "Canary Islands" },
  { code: "ğŸ‡®ğŸ‡©", name: "Indonesia" },
  { code: "ğŸ‡®ğŸ‡ª", name: "Ireland" },
  { code: "ğŸ‡®ğŸ‡±", name: "Israel" },
  { code: "ğŸ‡®ğŸ‡²", name: "Isle of Man" },
  { code: "ğŸ‡®ğŸ‡³", name: "India" },
  { code: "ğŸ‡®ğŸ‡´", name: "British Indian Ocean Territory" },
  { code: "ğŸ‡®ğŸ‡¶", name: "Iraq" },
  { code: "ğŸ‡®ğŸ‡·", name: "Iran" },
  { code: "ğŸ‡®ğŸ‡¸", name: "Iceland" },
  { code: "ğŸ‡®ğŸ‡¹", name: "Italy" },
  { code: "ğŸ‡¯ğŸ‡ª", name: "Jersey" },
  { code: "ğŸ‡¯ğŸ‡²", name: "Jamaica" },
  { code: "ğŸ‡¯ğŸ‡´", name: "Jordan" },
  { code: "ğŸ‡¯ğŸ‡µ", name: "Japan" },
  { code: "ğŸ‡°ğŸ‡ª", name: "Kenya" },
  { code: "ğŸ‡°ğŸ‡¬", name: "Kyrgyzstan" },
  { code: "ğŸ‡°ğŸ‡­", name: "Cambodia" },
  { code: "ğŸ‡°ğŸ‡®", name: "Kiribati" },
  { code: "ğŸ‡°ğŸ‡²", name: "Comoros" },
  { code: "ğŸ‡°ğŸ‡³", name: "St. Kitts & Nevis" },
  { code: "ğŸ‡°ğŸ‡µ", name: "North Korea" },
  { code: "ğŸ‡°ğŸ‡·", name: "South Korea" },
  { code: "ğŸ‡°ğŸ‡¼", name: "Kuwait" },
  { code: "ğŸ‡°ğŸ‡¾", name: "Cayman Islands" },
  { code: "ğŸ‡°ğŸ‡¿", name: "Kazakhstan" },
  { code: "ğŸ‡±ğŸ‡¦", name: "Laos" },
  { code: "ğŸ‡±ğŸ‡§", name: "Lebanon" },
  { code: "ğŸ‡±ğŸ‡¨", name: "St. Lucia" },
  { code: "ğŸ‡±ğŸ‡®", name: "Liechtenstein" },
  { code: "ğŸ‡±ğŸ‡°", name: "Sri Lanka" },
  { code: "ğŸ‡±ğŸ‡·", name: "Liberia" },
  { code: "ğŸ‡±ğŸ‡¸", name: "Lesotho" },
  { code: "ğŸ‡±ğŸ‡¹", name: "Lithuania" },
  { code: "ğŸ‡±ğŸ‡º", name: "Luxembourg" },
  { code: "ğŸ‡±ğŸ‡»", name: "Latvia" },
  { code: "ğŸ‡±ğŸ‡¾", name: "Libya" },
  { code: "ğŸ‡²ğŸ‡¦", name: "Morocco" },
  { code: "ğŸ‡²ğŸ‡¨", name: "Monaco" },
  { code: "ğŸ‡²ğŸ‡©", name: "Moldova" },
  { code: "ğŸ‡²ğŸ‡ª", name: "Montenegro" },
  { code: "ğŸ‡²ğŸ‡«", name: "St. Martin" },
  { code: "ğŸ‡²ğŸ‡¬", name: "Madagascar" },
  { code: "ğŸ‡²ğŸ‡­", name: "Marshall Islands" },
  { code: "ğŸ‡²ğŸ‡°", name: "North Macedonia" },
  { code: "ğŸ‡²ğŸ‡±", name: "Mali" },
  { code: "ğŸ‡²ğŸ‡²", name: "Myanmar (Burma)" },
  { code: "ğŸ‡²ğŸ‡³", name: "Mongolia" },
  { code: "ğŸ‡²ğŸ‡´", name: "Macao SAR China" },
  { code: "ğŸ‡²ğŸ‡µ", name: "Northern Mariana Islands" },
  { code: "ğŸ‡²ğŸ‡¶", name: "Martinique" },
  { code: "ğŸ‡²ğŸ‡·", name: "Mauritania" },
  { code: "ğŸ‡²ğŸ‡¸", name: "Montserrat" },
  { code: "ğŸ‡²ğŸ‡¹", name: "Malta" },
  { code: "ğŸ‡²ğŸ‡º", name: "Mauritius" },
  { code: "ğŸ‡²ğŸ‡»", name: "Maldives" },
  { code: "ğŸ‡²ğŸ‡¼", name: "Malawi" },
  { code: "ğŸ‡²ğŸ‡½", name: "Mexico" },
  { code: "ğŸ‡²ğŸ‡¾", name: "Malaysia" },
  { code: "ğŸ‡²ğŸ‡¿", name: "Mozambique" },
  { code: "ğŸ‡³ğŸ‡¦", name: "Namibia" },
  { code: "ğŸ‡³ğŸ‡¨", name: "New Caledonia" },
  { code: "ğŸ‡³ğŸ‡ª", name: "Niger" },
  { code: "ğŸ‡³ğŸ‡«", name: "Norfolk Island" },
  { code: "ğŸ‡³ğŸ‡¬", name: "Nigeria" },
  { code: "ğŸ‡³ğŸ‡®", name: "Nicaragua" },
  { code: "ğŸ‡³ğŸ‡±", name: "Netherlands" },
  { code: "ğŸ‡³ğŸ‡´", name: "Norway" },
  { code: "ğŸ‡³ğŸ‡µ", name: "Nepal" },
  { code: "ğŸ‡³ğŸ‡·", name: "Nauru" },
  { code: "ğŸ‡³ğŸ‡º", name: "Niue" },
  { code: "ğŸ‡³ğŸ‡¿", name: "New Zealand" },
  { code: "ğŸ‡´ğŸ‡²", name: "Oman" },
  { code: "ğŸ‡µğŸ‡¦", name: "Panama" },
  { code: "ğŸ‡µğŸ‡ª", name: "Peru" },
  { code: "ğŸ‡µğŸ‡«", name: "French Polynesia" },
  { code: "ğŸ‡µğŸ‡¬", name: "Papua New Guinea" },
  { code: "ğŸ‡µğŸ‡­", name: "Philippines" },
  { code: "ğŸ‡µğŸ‡°", name: "Pakistan" },
  { code: "ğŸ‡µğŸ‡±", name: "Poland" },
  { code: "ğŸ‡µğŸ‡²", name: "St. Pierre & Miquelon" },
  { code: "ğŸ‡µğŸ‡³", name: "Pitcairn Islands" },
  { code: "ğŸ‡µğŸ‡·", name: "Puerto Rico" },
  { code: "ğŸ‡µğŸ‡¸", name: "Palestinian Territories" },
  { code: "ğŸ‡µğŸ‡¹", name: "Portugal" },
  { code: "ğŸ‡µğŸ‡¼", name: "Palau" },
  { code: "ğŸ‡µğŸ‡¾", name: "Paraguay" },
  { code: "ğŸ‡¶ğŸ‡¦", name: "Qatar" },
  { code: "ğŸ‡·ğŸ‡ª", name: "RÃ©union" },
  { code: "ğŸ‡·ğŸ‡´", name: "Romania" },
  { code: "ğŸ‡·ğŸ‡¸", name: "Serbia" },
  { code: "ğŸ‡·ğŸ‡º", name: "Russia" },
  { code: "ğŸ‡·ğŸ‡¼", name: "Rwanda" },
  { code: "ğŸ‡¸ğŸ‡¦", name: "Saudi Arabia" },
  { code: "ğŸ‡¸ğŸ‡§", name: "Solomon Islands" },
  { code: "ğŸ‡¸ğŸ‡¨", name: "Seychelles" },
  { code: "ğŸ‡¸ğŸ‡©", name: "Sudan" },
  { code: "ğŸ‡¸ğŸ‡ª", name: "Sweden" },
  { code: "ğŸ‡¸ğŸ‡¬", name: "Singapore" },
  { code: "ğŸ‡¸ğŸ‡­", name: "St. Helena" },
  { code: "ğŸ‡¸ğŸ‡®", name: "Slovenia" },
  { code: "ğŸ‡¸ğŸ‡¯", name: "Svalbard & Jan Mayen" },
  { code: "ğŸ‡¸ğŸ‡°", name: "Slovakia" },
  { code: "ğŸ‡¸ğŸ‡±", name: "Sierra Leone" },
  { code: "ğŸ‡¸ğŸ‡²", name: "San Marino" },
  { code: "ğŸ‡¸ğŸ‡³", name: "Senegal" },
  { code: "ğŸ‡¸ğŸ‡´", name: "Somalia" },
  { code: "ğŸ‡¸ğŸ‡·", name: "Suriname" },
  { code: "ğŸ‡¸ğŸ‡¸", name: "South Sudan" },
  { code: "ğŸ‡¸ğŸ‡¹", name: "SÃ£o TomÃ© & PrÃ­ncipe" },
  { code: "ğŸ‡¸ğŸ‡»", name: "El Salvador" },
  { code: "ğŸ‡¸ğŸ‡½", name: "Sint Maarten" },
  { code: "ğŸ‡¸ğŸ‡¾", name: "Syria" },
  { code: "ğŸ‡¸ğŸ‡¿", name: "Eswatini" },
  { code: "ğŸ‡¹ğŸ‡¦", name: "Tristan da Cunha" },
  { code: "ğŸ‡¹ğŸ‡¨", name: "Turks & Caicos Islands" },
  { code: "ğŸ‡¹ğŸ‡©", name: "Chad" },
  { code: "ğŸ‡¹ğŸ‡«", name: "French Southern Territories" },
  { code: "ğŸ‡¹ğŸ‡¬", name: "Togo" },
  { code: "ğŸ‡¹ğŸ‡­", name: "Thailand" },
  { code: "ğŸ‡¹ğŸ‡¯", name: "Tajikistan" },
  { code: "ğŸ‡¹ğŸ‡°", name: "Tokelau" },
  { code: "ğŸ‡¹ğŸ‡±", name: "Timor-Leste" },
  { code: "ğŸ‡¹ğŸ‡²", name: "Turkmenistan" },
  { code: "ğŸ‡¹ğŸ‡³", name: "Tunisia" },
  { code: "ğŸ‡¹ğŸ‡´", name: "Tonga" },
  { code: "ğŸ‡¹ğŸ‡·", name: "Turkey" },
  { code: "ğŸ‡¹ğŸ‡¹", name: "Trinidad & Tobago" },
  { code: "ğŸ‡¹ğŸ‡»", name: "Tuvalu" },
  { code: "ğŸ‡¹ğŸ‡¼", name: "Taiwan" },
  { code: "ğŸ‡¹ğŸ‡¿", name: "Tanzania" },
  { code: "ğŸ‡ºğŸ‡¦", name: "Ukraine" },
  { code: "ğŸ‡ºğŸ‡¬", name: "Uganda" },
  { code: "ğŸ‡ºğŸ‡²", name: "U.S. Outlying Islands" },
  { code: "ğŸ‡ºğŸ‡³", name: "United Nations" },
  { code: "ğŸ‡ºğŸ‡¸", name: "United States" },
  { code: "ğŸ‡ºğŸ‡¾", name: "Uruguay" },
  { code: "ğŸ‡ºğŸ‡¿", name: "Uzbekistan" },
  { code: "ğŸ‡»ğŸ‡¦", name: "Vatican City" },
  { code: "ğŸ‡»ğŸ‡¨", name: "St. Vincent & Grenadines" },
  { code: "ğŸ‡»ğŸ‡ª", name: "Venezuela" },
  { code: "ğŸ‡»ğŸ‡¬", name: "British Virgin Islands" },
  { code: "ğŸ‡»ğŸ‡®", name: "U.S. Virgin Islands" },
  { code: "ğŸ‡»ğŸ‡³", name: "Vietnam" },
  { code: "ğŸ‡»ğŸ‡º", name: "Vanuatu" },
  { code: "ğŸ‡¼ğŸ‡«", name: "Wallis & Futuna" },
  { code: "ğŸ‡¼ğŸ‡¸", name: "Samoa" },
  { code: "ğŸ‡¾ğŸ‡ª", name: "Yemen" },
  { code: "ğŸ‡¾ğŸ‡¹", name: "Mayotte" },
  { code: "ğŸ‡¿ğŸ‡¦", name: "South Africa" },
  { code: "ğŸ‡¿ğŸ‡²", name: "Zambia" },
  { code: "ğŸ‡¿ğŸ‡¼", name: "Zimbabwe" },
];

export default function LanguagesManagementPage() {
  const [languages, setLanguages] = useState<SupportedLanguage[]>([]);
  const [loading, setLoading] = useState(true);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [editingLanguage, setEditingLanguage] = useState<SupportedLanguage | null>(null);
  const [formData, setFormData] = useState({
    code: "",
    name: "",
    nativeName: "",
    flag: "",
    isActive: true,
    isDefault: false,
    sortOrder: 0
  });
  const { toast } = useToast();

  // Fetch languages
  const fetchLanguages = async () => {
    try {
      const response = await fetch("/api/admin/languages");
      if (response.ok) {
        const data = await response.json();
        setLanguages(data.languages);
      } else {
        toast({
          title: "Error",
          description: "Failed to fetch languages",
          variant: "destructive"
        });
      }
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to fetch languages",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchLanguages();
  }, []);

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      const url = editingLanguage 
        ? `/api/admin/languages/${editingLanguage.id}`
        : "/api/admin/languages";
      
      const method = editingLanguage ? "PUT" : "POST";
      
      const response = await fetch(url, {
        method,
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(formData),
      });

      if (response.ok) {
        toast({
          title: "Success",
          description: editingLanguage 
            ? "Language updated successfully" 
            : "Language created successfully"
        });
        setIsDialogOpen(false);
        setEditingLanguage(null);
        setFormData({
          code: "",
          name: "",
          nativeName: "",
          flag: "",
          isActive: true,
          isDefault: false,
          sortOrder: 0
        });
        fetchLanguages();
      } else {
        const error = await response.json();
        toast({
          title: "Error",
          description: error.error || "Failed to save language",
          variant: "destructive"
        });
      }
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to save language",
        variant: "destructive"
      });
    }
  };

  // Handle edit
  const handleEdit = (language: SupportedLanguage) => {
    setEditingLanguage(language);
    setFormData({
      code: language.code,
      name: language.name,
      nativeName: language.nativeName,
      flag: language.flag,
      isActive: language.isActive,
      isDefault: language.isDefault,
      sortOrder: language.sortOrder
    });
    setIsDialogOpen(true);
  };

  // Handle delete
  const handleDelete = async (id: string) => {
    try {
      const response = await fetch(`/api/admin/languages/${id}`, {
        method: "DELETE",
      });

      if (response.ok) {
        toast({
          title: "Success",
          description: "Language deleted successfully"
        });
        fetchLanguages();
      } else {
        const error = await response.json();
        toast({
          title: "Error",
          description: error.error || "Failed to delete language",
          variant: "destructive"
        });
      }
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to delete language",
        variant: "destructive"
      });
    }
  };

  // Reset form
  const resetForm = () => {
    setFormData({
      code: "",
      name: "",
      nativeName: "",
      flag: "",
      isActive: true,
      isDefault: false,
      sortOrder: 0
    });
    setEditingLanguage(null);
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-lg">Loading languages...</div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">Languages Management</h1>
          <p className="text-muted-foreground">
            Manage supported languages for the application
          </p>
        </div>
        
        <Dialog open={isDialogOpen} onOpenChange={(open) => {
          setIsDialogOpen(open);
          if (!open) resetForm();
        }}>
          <DialogTrigger asChild>
            <Button onClick={resetForm}>
              <Plus className="h-4 w-4 mr-2" />
              Add Language
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[425px]">
            <DialogHeader>
              <DialogTitle>
                {editingLanguage ? "Edit Language" : "Add New Language"}
              </DialogTitle>
              <DialogDescription>
                {editingLanguage 
                  ? "Update the language settings below." 
                  : "Add a new language to the system."
                }
              </DialogDescription>
            </DialogHeader>
            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="code">Language Code</Label>
                  <Input
                    id="code"
                    value={formData.code}
                    onChange={(e) => setFormData({ ...formData, code: e.target.value })}
                    placeholder="en"
                    required
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="flag">Country Flag</Label>
                  <Select
                    value={formData.flag}
                    onValueChange={(value) => setFormData({ ...formData, flag: value })}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select a flag" />
                    </SelectTrigger>
                    <SelectContent className="max-h-60">
                      {countryFlags.map((flag) => (
                        <SelectItem key={flag.code} value={flag.code}>
                          <div className="flex items-center gap-2">
                            <span className="text-lg">{flag.code}</span>
                            <span>{flag.name}</span>
                          </div>
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="name">English Name</Label>
                <Input
                  id="name"
                  value={formData.name}
                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                  placeholder="English"
                  required
                />
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="nativeName">Native Name</Label>
                <Input
                  id="nativeName"
                  value={formData.nativeName}
                  onChange={(e) => setFormData({ ...formData, nativeName: e.target.value })}
                  placeholder="English"
                  required
                />
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="sortOrder">Sort Order</Label>
                <Input
                  id="sortOrder"
                  type="number"
                  value={formData.sortOrder}
                  onChange={(e) => setFormData({ ...formData, sortOrder: parseInt(e.target.value) || 0 })}
                  placeholder="0"
                />
              </div>
              
              <div className="flex items-center space-x-4">
                <div className="flex items-center space-x-2">
                  <Switch
                    id="isActive"
                    checked={formData.isActive}
                    onCheckedChange={(checked) => setFormData({ ...formData, isActive: checked })}
                  />
                  <Label htmlFor="isActive">Active</Label>
                </div>
                
                <div className="flex items-center space-x-2">
                  <Switch
                    id="isDefault"
                    checked={formData.isDefault}
                    onCheckedChange={(checked) => setFormData({ ...formData, isDefault: checked })}
                  />
                  <Label htmlFor="isDefault">Default</Label>
                </div>
              </div>
              
              <DialogFooter>
                <Button type="button" variant="outline" onClick={() => setIsDialogOpen(false)}>
                  Cancel
                </Button>
                <Button type="submit">
                  {editingLanguage ? "Update" : "Create"}
                </Button>
              </DialogFooter>
            </form>
          </DialogContent>
        </Dialog>
      </div>

      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Globe className="h-5 w-5" />
            Supported Languages
          </CardTitle>
          <CardDescription>
            Configure which languages are available to users
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Flag</TableHead>
                <TableHead>Code</TableHead>
                <TableHead>Name</TableHead>
                <TableHead>Native Name</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Sort Order</TableHead>
                <TableHead>Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {languages.map((language) => (
                <TableRow key={language.id}>
                  <TableCell className="text-2xl">{language.flag}</TableCell>
                  <TableCell className="font-mono">{language.code}</TableCell>
                  <TableCell>{language.name}</TableCell>
                  <TableCell>{language.nativeName}</TableCell>
                  <TableCell>
                    <div className="flex items-center gap-2">
                      <Badge variant={language.isActive ? "default" : "secondary"}>
                        {language.isActive ? "Active" : "Inactive"}
                      </Badge>
                      {language.isDefault && (
                        <Badge variant="outline" className="flex items-center gap-1">
                          <Star className="h-3 w-3" />
                          Default
                        </Badge>
                      )}
                    </div>
                  </TableCell>
                  <TableCell>{language.sortOrder}</TableCell>
                  <TableCell>
                    <div className="flex items-center gap-2">
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => handleEdit(language)}
                      >
                        <Edit className="h-4 w-4" />
                      </Button>
                      {!language.isDefault && (
                        <AlertDialog>
                          <AlertDialogTrigger asChild>
                            <Button variant="ghost" size="sm">
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </AlertDialogTrigger>
                          <AlertDialogContent>
                            <AlertDialogHeader>
                              <AlertDialogTitle>Delete Language</AlertDialogTitle>
                              <AlertDialogDescription>
                                Are you sure you want to delete "{language.name}"? This action cannot be undone.
                              </AlertDialogDescription>
                            </AlertDialogHeader>
                            <AlertDialogFooter>
                              <AlertDialogCancel>Cancel</AlertDialogCancel>
                              <AlertDialogAction
                                onClick={() => handleDelete(language.id)}
                                className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
                              >
                                Delete
                              </AlertDialogAction>
                            </AlertDialogFooter>
                          </AlertDialogContent>
                        </AlertDialog>
                      )}
                    </div>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  );
}
