import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { auth } from '@/lib/auth/config-simple';

export async function middleware(request: NextRequest) {
  // Skip middleware for API routes, static files, and auth pages
  if (
    request.nextUrl.pathname.startsWith('/api') ||
    request.nextUrl.pathname.startsWith('/_next') ||
    request.nextUrl.pathname.startsWith('/static') ||
    request.nextUrl.pathname.includes('.') ||
    request.nextUrl.pathname.startsWith('/sign-in') ||
    request.nextUrl.pathname.startsWith('/sign-up') ||
    request.nextUrl.pathname.startsWith('/public')
  ) {
    return NextResponse.next();
  }

  try {
    const session = await auth.api.getSession({
      headers: request.headers,
    });

    // Redirect to sign-in if not authenticated
    if (!session) {
      return NextResponse.redirect(new URL('/sign-in', request.url));
    }

    // Role-based access control
    const { pathname } = request.nextUrl;
    const userRole = session.user.role;

    // Admin-only routes
    if (pathname.startsWith('/settings') && userRole !== 'ADMIN') {
      return NextResponse.redirect(new URL('/dashboard', request.url));
    }

    // Manager+ routes
    if (
      (pathname.startsWith('/companies') ||
       pathname.startsWith('/contacts') ||
       pathname.startsWith('/leads') ||
       pathname.startsWith('/opportunities')) &&
      !['ADMIN', 'MANAGER'].includes(userRole)
    ) {
      return NextResponse.redirect(new URL('/dashboard', request.url));
    }

    // B2B portal routes
    if (pathname.startsWith('/b2b') && userRole !== 'B2B') {
      return NextResponse.redirect(new URL('/dashboard', request.url));
    }

    return NextResponse.next();
  } catch (error) {
    console.error('Middleware error:', error);
    return NextResponse.redirect(new URL('/sign-in', request.url));
  }
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api (API routes)
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     */
    '/((?!api|_next/static|_next/image|favicon.ico).*)',
  ],
};
